@addTagHelper *,Microsoft.AspNetCore.Mvc.TagHelpers
@using PRN_ExamO_HE176160.Models
@using Microsoft.AspNetCore.Http
@model Tuple<List<Question>, List<Option>>
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    string user = Context.Session.GetString("Uname");
    int? userId = Context.Session.GetInt32("UId");
}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&family=Nunito:ital,wght@0,200;0,400;0,500;0,600;0,700;0,800;0,1000;1,400;1,500&family=Oswald:wght@600&family=Roboto:wght@100;400;500;700&display=swap" rel="stylesheet">

<script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
<script src="https://unpkg.com/jquery"></script>

<style>


    body {
        background-color: #fbfbfb;
        padding:0 !important;

    }

    * {
        font-family: 'Bebas Neue', sans-serif;
        font-family: 'Nunito', sans-serif;
        font-family: 'Oswald', sans-serif;
        font-family: 'Roboto', sans-serif;
        color: #4d4d4d;
        /*border: 1px solid red !important;*/
        transition: .3s all ease;
    }

    .login-user {
        display: flex;
        flex-direction: row;
        align-items: center;
        /*justify-content: flex-end;*/
        justify-content: space-between;
        margin: 1rem 2rem;
    }

        .login-user ion-icon {
            font-size: 1.5rem;
            cursor: pointer;
        }

    .index-header {
        min-height: 150px;
        margin: 0 2rem;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
        font-size: 3rem;
        overflow: hidden;
    }

    .quest-nav {
        transform: translateY(200%);
    }

        .quest-nav span {
        }

        .quest-nav a {
            font-size: 2rem;
            width: 1rem;
            background-color: #fbfbfb;
            padding: .4rem 1rem;
            border: 2px solid #fbfbfb;
            border-radius: 8px;
            text-decoration: none;
        }

    .pre-exam {
        height: 45vh;
        /*margin: 2rem;*/
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .pre-exam button {
            height: fit-content;
            font-size: 2rem;
            font-weight: 600;
            background-color: #ffffff;
            padding: 1rem 4rem;
            border: 2px solid #fbfbfb;
            border-radius: 2rem;
            cursor: pointer;
        }

            .pre-exam button:hover {
                box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
            }

    .takeQuizz-wrap {
        display: flex;
        flex-direction: row;
        margin: 0;
        overflow: hidden;
        /*width:calc(100svw - 6rem);*/
    }

    .takeQuizz-content {
        width: calc(75%);
        height: 0px;
        padding: 0px;
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;

        align-self: flex-start;
        margin-right: 1rem;
        transform: translateX(-200%);

        display:flex;
        flex-direction:row;
        overflow:hidden;
    }


    .tq-form {
        width: calc(100svw - 5rem);

        display: flex;
        flex-direction: row;
        overflow-x: hidden;

        overflow:scroll;
    }

        .tq-form::-webkit-scrollbar {
            display: none;
        }

    .takeQuizz-util {
        width: calc(25%);
        height: 100%;
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 1rem;
        box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;
        margin: 0 8px 0 auto;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        transform: translateX(200%);
    }

        .takeQuizz-util span {
            font-size: 3rem;
        }

        .takeQuizz-util button {
            width: 100%;
            margin-top: 1rem;
            padding: .4rem;
            font-size: 1.2rem;
            font-weight: bold;
            border-radius: 1rem;
            background-color: rgba(127, 255, 212, 0.25);
            border: 2px solid aquamarine;
            cursor: pointer;
        }

    .question-wrap {
        width: calc(100% - 4rem);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 45svh;
        flex-shrink: 0;
        padding:2rem;
    }

    .quest-nav.active {
        transform: translateY(0);
    }

    .pre-exam.active {
    }

    .takeQuizz-wrap.active {
    }

    .takeQuizz-content.active {
        transform: translateX(0);
        height: min-content;
    }

    .takeQuizz-util.active {
        transform: translateX(0);
        
    }

    .q-text {
    }

        .q-text span {
            font-size: 1.5rem;
        }

    .opion-section {
        /*background-color: #fbfbfb;*/


        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        /*padding: 2rem;*/
    }

    .option-item {
        /*background-color:crimson;*/

        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        padding: 0 2rem;
    }

        .option-item label {
            font-size: 1.5rem;
            border: 2px solid #fbfbfb;
            background-color: #fbfbfb;
            border-radius: 1.5rem;
            /*min-width: 70%;*/
            text-align: center;
            padding: 1rem;
            cursor: pointer;
        }

        .option-item:not(.active) label:hover {
            box-shadow: rgba(0, 0, 0, 0.04) 0px 3px 5px;
        }


    .opion-section input[type="radio"]:checked + label {
        background-color: rgba(127, 255, 212, 0.25);
        border: 2px solid aquamarine;
    }

    .active-link {
        background-color: rgba(127, 255, 212, 0.25) !important;
        border: 2px solid aquamarine !important;
    }

    .q-main{
        width: calc(100% - 4rem);
        margin: 1rem 2rem;
        height:min-content;
    }
</style>

<section class="login-user">
    <a href="/home"><ion-icon name="chevron-back-outline"></ion-icon></a>

    @if (user != null && !user.Trim().Equals(""))
    {
        <span>@user&nbsp</span>
    }
</section>
<section class="index-header">
    <span>@ViewBag.ExamId : @ViewBag.ExamName</span>
    <div class="quest-nav" id="quest-nav">
        <span>
            @foreach (var question in Model.Item1)
            {
                var questionId = "question-wrap-" + question.QuestionId;
                var questionIndex = Model.Item1.IndexOf(question) + 1;
                <a href="#@questionId" onclick="scrollToDiv(event, '@questionId')">@questionIndex</a>
            }
        </span>
    </div>
</section>

<main class="q-main">
    <div class="pre-exam" id="pre-exam">
        <button id="startButton">Start</button>
    </div>
    <div class="takeQuizz-wrap">

        <form id="quiz-form" asp-controller="Exam" asp-action="SubmitExam" method="post">
            <div class="tq-form">
                <section class="takeQuizz-content">
                    @foreach (var question in Model.Item1)
                    {
                        var questionIndex = Model.Item1.IndexOf(question) + 1;
                        <div class="question-wrap" id="question-wrap-@question.QuestionId">

                            <input type="hidden" name="userAnswers.Index" value="@question.QuestionId" />
                            <input type="hidden" name="userAnswers[@question.QuestionId].QuestionId" value="@question.QuestionId" />
                            <input type="hidden" name="userAnswers[@question.QuestionId].ExamId" value="@ViewBag.ExamId" />
                            <input type="hidden" name="userAnswers[@question.QuestionId].UserId" value="@userId" />
                            @*<input type="hidden" name="userAnswers[@question.QuestionId]." value="@userId" />*@

                            <div class="q-text">
                                <span> @questionIndex. @question.QuestionText</span>
                            </div>

                            <div class="opion-section">
                                @foreach (var option in Model.Item2.Where(o => o.QuestionId == question.QuestionId))
                                {

                                    <div class="option-item">
                                        <input type="radio" id="@option.OptionId" name="userAnswers[@question.QuestionId].SelectedOptionId" hidden onchange="toggleOptionItemClass(this)" value="@option.OptionId" />

                                        <label for="@option.OptionId">@option.OptionText</label>
                                        @*<label for="@option.OptionId">@option.IsCorrectOption|@option.OptionText</label>*@
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </section>
                <section class="takeQuizz-util">
                    <span id="timer">30:00</span>
                    <button type="submit" id="submitButton">Submit</button>
                </section>
            </div>
        </form>

    </div>
</main>


<script>
    const preExam = document.getElementById("pre-exam");
    const startButton = document.getElementById("startButton");
    const takeQuizzWrap = document.querySelector(".takeQuizz-wrap");
    const takeQuizzContent = document.querySelector(".takeQuizz-content");
    const takeQuizzUtil = document.querySelector(".takeQuizz-util");
    const timerElement = document.getElementById("timer");
    const submitButton = document.getElementById("submitButton");
    const questNav = document.getElementById("quest-nav");
    const qf = document.getElementById("quiz-form");

    startButton.addEventListener("click", () => {
        takeQuizzWrap.classList.add("active");
        takeQuizzContent.classList.add("active");
        takeQuizzUtil.classList.add("active");
        questNav.classList.add("active");
        preExam.style.display = "none";
        startCountdown();
        startButton.disabled = true;
    });

    function startCountdown() {
        let timeLeft = 2 * 60;

        const countdownInterval = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;

            timerElement.textContent = `${padZero(minutes)}:${padZero(seconds)}`;

            if (timeLeft > 0) {
                timeLeft--;
            } else {
                clearInterval(countdownInterval);
                document.getElementById("quiz-form").submit();

            }
        }, 1000);
    }

    function padZero(number) {
        return number.toString().padStart(2, "0");
    }

    function scrollToDiv(event, targetId) {
        event.preventDefault();
        var targetDiv = document.getElementById(targetId);
        targetDiv.scrollIntoView({ behavior: "smooth" });
    }


    function toggleOptionItemClass(checkbox) {
        var optionItem = checkbox.parentNode;
        var questionId = optionItem.closest(".question-wrap").id.replace("question-wrap-", "");
        var link = document.querySelector(`a[href="#question-wrap-${questionId}"]`);

        if (checkbox.checked) {
            //optionItem.classList.add("active");
            link.classList.add("active-link");
        } else {
            //optionItem.classList.remove("active");
            link.classList.remove("active-link");
        }
    }

    function alertCheckedCheckboxes() {
        const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        let checkedOptions = "";
        checkboxes.forEach((checkbox) => {
            checkedOptions += checkbox.id + "\n";
        });
        console.log(checkedOptions);
    }

</script>

